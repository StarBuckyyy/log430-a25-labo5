name: CI/CD for Store Manager

on:
  push:
    branches: [ main ]

jobs:
  build-test-and-deploy:
    name: Build, Test and Deploy
    runs-on: self-hosted

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Create .env file for testing
      run: |
        echo "DB_HOST=127.0.0.1" > .env
        echo "DB_PORT=3306" >> .env
        echo "DB_USER=labo05" >> .env
        echo "DB_PASSWORD=labo05" >> .env
        echo "DB_NAME=labo05_db" >> .env
        echo "REDIS_HOST=127.0.0.1" >> .env
        echo "REDIS_PORT=6379" >> .env
        echo "REDIS_DB=0" >> .env

    - name: Start services for tests
      run: docker compose up -d mysql redis

    - name: Wait for MySQL to be healthy
      run: |
        echo "Waiting for MySQL to be ready..."
        timeout=90
        elapsed=0
        
        # Attendre que le conteneur existe
        until docker compose ps mysql | grep -q mysql; do
          echo "Waiting for MySQL container to start..."
          sleep 2
          elapsed=$((elapsed + 2))
          if [ $elapsed -ge 30 ]; then
            echo "❌ MySQL container did not start"
            exit 1
          fi
        done
        
        # Attendre le healthcheck
        until [ "healthy" = "$(docker inspect -f '{{.State.Health.Status}}' $(docker compose ps -q mysql))" ]; do
          echo -n "."
          sleep 2
          elapsed=$((elapsed + 2))
          if [ $elapsed -ge $timeout ]; then
            echo "❌ MySQL did not become healthy in time"
            docker compose logs mysql
            exit 1
          fi
        done
        
        echo " ✅ MySQL is healthy!"
        
        # Attendre un peu plus pour que MySQL soit vraiment prêt
        echo "Waiting for MySQL to be fully ready for connections..."
        sleep 10
        
        echo "✅ MySQL is ready for tests!"

    - name: Run automated tests
      env:
        CI: true
        PYTHONPATH: src
      run: pytest

    - name: Stop test services
      if: always()
      run: docker compose down

    - name: Deploy new version to VM
      if: success()
      run: |
        echo "✅ Tests passed. Deploying new version..."
        docker compose up -d --build